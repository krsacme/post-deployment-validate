---
- name: Reset Variables
  set_fact:
    instance_nics: []
    instance_helper_nic_mac_addresses: []

- name: Gather Instance Facts From OpenStack API
  vars:
    ansible_python_interpreter: "{{venv_path}}/bin/python"
  os_server_facts:
    cloud: "{{ query_cloud }}"
    server: "{{ query_instance | mandatory }}"
    validate_certs: "{{ cloud_validate_certs }}"
  failed_when: openstack_servers == []

- name: Parse Instance Server NICs' MAC Addresses
  set_fact:
    instance_helper_nic_mac_addresses: "{{ instance_helper_nic_mac_addresses }} + [ '{{ openstack_servers[0]['addresses'][inner_item][0]['OS-EXT-IPS-MAC:mac_addr'] }}' ]"
  loop: "{{ openstack_servers[0]['addresses'] | flatten(levels=1) }}"
  loop_control:
    loop_var: inner_item

- name: Gather Instance Server Ports
  vars:
    ansible_python_interpreter: "{{venv_path}}/bin/python"
  os_port_facts:
    cloud: "{{ query_cloud }}"
    validate_certs: "{{ cloud_validate_certs }}"
    filters:
      mac_address: "{{ inner_item }}"
  loop: "{{ instance_helper_nic_mac_addresses | flatten(levels=1) }}"
  failed_when: openstack_ports == []
  register: instance_ports
  loop_control:
    loop_var: inner_item

- name: Parse Floating IP Attribute From APIs
  set_fact:
    instance_external_ip: "{{ openstack_servers[0]['addresses'][inner_item] | selectattr('OS-EXT-IPS:type', 'equalto', 'floating') | map(attribute='addr') | list | first }}"
  loop: "{{ openstack_servers[0]['addresses'] | flatten(levels=1) }}"
  when: openstack_servers[0]['addresses'][inner_item] | selectattr('OS-EXT-IPS:type', 'equalto', 'floating') | list != []
  loop_control:
    loop_var: inner_item

- add_host:
    name: "{{ instance_external_ip }}"
    groups: "{{ item['group'] }}"
    ansible_user: "{{ item['user'] | default('root') }}"
    ansible_password: "{{ item['password'] | default(omit) }}"
    ansible_ssh_private_key_file: "{{ item['ssh_key'] | default(omit) }}"
    ansible_ssh_pass: "{{ item['ssh_pass'] | default(omit) }}"

#- name: Refresh inventory to ensure new instaces exist in inventory
#  meta: refresh_inventory
